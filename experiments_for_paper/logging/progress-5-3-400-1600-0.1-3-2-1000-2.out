
R version 3.4.4 (2018-03-15) -- "Someone to Lean On"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.3.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> rm(list = ls())
> 
> setwd("~/Projects/FTE/grant001_ghosh_nsf_theorypredanalytics/lib/balanceHD/experiments_for_paper/")
> library(balanceHD)
> library(mvtnorm)
> 
> # Read inputs to simulation
> 
> args = (commandArgs(TRUE))
> beta.setup = as.numeric(args[1])
> prop.setup = as.numeric(args[2])
> n = as.numeric(args[3])
> p = as.numeric(args[4])
> eps = as.numeric(args[5])
> C = as.numeric(args[6])
> extra.param = as.numeric(args[7])
> 
> NREP = as.numeric(args[8])
> 
> experiment = as.numeric(args[9])
> 
> tau = 1
> 
> source("run.comparison.R")
> 
> # Intialize beta
> 
> if(beta.setup == 0) {
+   beta.raw = rep(1, p)
+ } else if(beta.setup == 1){
+   beta.raw = 1/sqrt(1:p)
+ } else if(beta.setup == 2) {
+   beta.raw = 1/(9 + 1:p)
+ } else if(beta.setup == 3) {
+   beta.raw = c(rep(10, 10), rep(1, 90), rep(0, p - 100))
+ } else if(beta.setup == 4) {
+   beta.raw = c(rep(10, 10), rep(0, p - 10))
+ } else if(beta.setup == 5) {
+   beta.raw = 1/(1:p)^2
+ } else if(beta.setup == 6) {
+   beta.raw = 1/(1:p)
+ }
> 
> beta.main =  C  * beta.raw / sqrt(sum(beta.raw^2))
> 
> # Initialize data-generating model
> if(prop.setup == 1) {
+ 	
+ 	# simple setup
+ 	if (extra.param == 1) {
+ 		delta.clust = 4 / sqrt(n) * rep(1, p)
+ 	} else if (extra.param == 2) {
+ 		delta.clust = 40 / sqrt(n) * rep(c(1, rep(0, 9)), p/10)
+ 	}
+ 	gen.data = function() {
+ 		CLUST = rbinom(n, 1, 0.5)
+ 		W = rbinom(n, 1, eps + (1 - 2*eps) * CLUST)
+ 		X = matrix(rnorm(n * p), n, p) + outer(CLUST, delta.clust)
+ 		Y = X %*% beta.main + rnorm(n) + tau * W
+ 		list(X=X, Y=Y, W=W, catt=tau)
+ 	}
+ 
+ } else if(prop.setup == 2) {
+ 
+ 	# AR-1 model
+ 	rho = c(0.5, 0.9)[extra.param]
+ 	beta.main = beta.main[1 + (23 * (0:(length(beta.main) - 1))) %% length(beta.main)]
+ 	beta.prop = c(rep(1/40, 100), rep(0, p - 100))
+ 	gen.data = function() {
+ 		X = 10 * rmvnorm(n, sigma = outer(1:p, 1:p, FUN=function(x, y) rho^(abs(x-y))), method = "chol")
+ 		W = rbinom(n, 1, prob = 1/(1 + exp(-beta.prop * X)))
+ 		Y = X %*% beta.main + rnorm(n, 0, 1) + tau * W
+ 		list(X=X, Y=Y, W=W, catt=tau)
+ 	}
+ 
+ } else if(prop.setup == 3) {
+ 
+ 	# many cluster model
+ 	nclust = c(6, 20)[extra.param]
+ 	beta.main = sqrt(nclust) * beta.main
+ 	clust.ptreat = rep(c(eps, 1 - eps), nclust/2)
+ 	tau.clust = tau * rexp(nclust)
+ 	gen.data = function() {
+ 		cluster.center = matrix(rnorm(nclust * p), nclust, p)
+ 		cluster = sample.int(nclust, n, replace = TRUE)
+ 		X = cluster.center[cluster,] + matrix(rnorm(n * p), n, p)
+ 		W = rbinom(n, 1, clust.ptreat[cluster])
+ 		Y = X %*% beta.main + rnorm(n, 0, 1) + tau.clust[cluster] * W
+ 		list(X=X, Y=Y, W=W, catt=mean(tau.clust[cluster[W==1]]))
+ 	}
+ 
+ } else if(prop.setup == 4) {
+ 
+ 	tau = 1
+ 	
+ 	# misspecified model
+ 	gen.data = function() {
+ 		X = matrix(rnorm(n * p), n, p)
+ 		# Normalized such that E[tauX | W = 1] = 1
+ 		tauX = log(1 + exp(-2 - 2 * X[,1])) / 0.915
+ 		ptreat = 1 - exp(-tauX)
+ 		W = rbinom(n, 1, prob = ptreat)
+ 		mean(tauX[W == 1])
+ 		Y = rnorm(n, 0, 1) + tauX * (2 * W - 1) / 2 + rowSums(X[,1:10])
+ 		list(X=X, Y=Y, W=W, catt=mean(tauX[W==1]))
+ 	}
+         
+ } else if(prop.setup == 6) {
+ 
+ 	tau = 0.5
+ 	rho = 0.5
+ 	
+ 	Sigma = outer(1:p, 1:p, FUN=function(x, y) rho^(abs(x-y)))
+ 	
+ 	beta.raw = 1/(1:p)^2
+ 	beta.main =  C  * beta.raw / sqrt(sum(beta.raw^2))
+ 	
+ 	if (extra.param == 1) {
+ 		beta.prop = 1/(1:p)^2
+ 	} else if (extra.param == 2) {
+ 	    beta.prop = 1/sqrt(1:p)
+ 	}
+ 	
+ 	beta.prop = eps * beta.prop / sqrt(sum(beta.prop^2))
+ 	
+ 	gen.data = function() {
+ 		X = rmvnorm(n, sigma = Sigma, method = "chol")
+ 		theta = X %*% beta.prop + rnorm(n)
+ 		W = rbinom(n, 1, 1/(1 + exp(theta)))
+ 		Y = X %*% beta.main + W * tau + rnorm(n)
+ 		list(X=X, Y=Y, W=W, catt=tau)
+ 	}
+         
+ }
> 
> 
> 
> if (experiment == 1) {
+ 	
+ 	# MSE vs. other methods
+ 	results = replicate(NREP, {
+ 		XYW = gen.data()
+ 		res = run.comparison(XYW)
+ 		print(c(CATT=XYW$catt, res))
+ 		return(c(CATT=XYW$catt, res))
+ 	})
+ 	
+ 	print(colMeans((t(results) - results["CATT",])/results["CATT",]))
+ 	print(colMeans(((t(results) - results["CATT",])/results["CATT",])^2))
+ 	
+ } else if (experiment == 2) {
+ 	
+ 	# coverage
+ 	results = replicate(NREP, {
+ 		XYW = gen.data()
+ 		res = coverage.test(XYW)
+ 		print(c(CATT=XYW$catt, res))
+ 		return(c(CATT=XYW$catt, res))
+ 	})
+ 	rownames(results) = c("CATT", "tau.hat", "se.hat")
+ 	se.err = (results[2,] - results[1,]) / results[3,]
+ 	coverage = mean(abs(se.err) <= qnorm(0.975))
+ }
     CATT                     
1.9392545 1.6423812 0.2423609 
     CATT                     
1.5607943 1.4726154 0.2392103 
     CATT                     
1.6708242 2.1489026 0.2305212 
     CATT                     
1.5693365 1.7180365 0.2645611 
     CATT                     
1.3870897 1.2797482 0.2013111 
     CATT                     
1.4919753 1.3394605 0.2731292 
     CATT                     
1.4220739 1.7450034 0.2093056 
     CATT                     
1.4410217 1.6141227 0.1958665 
    CATT                   
1.573203 1.449701 0.325733 
     CATT                     
1.4744047 1.1909161 0.3304313 
     CATT                     
1.7240940 1.4032511 0.2284827 
     CATT                     
1.6021052 1.7515922 0.2420473 
     CATT                     
1.5133889 1.4143642 0.1767757 
     CATT                     
1.5097005 1.4214969 0.2836778 
     CATT                     
1.4685987 0.8404181 0.1653753 
     CATT                     
1.6902589 1.8235998 0.1910535 
     CATT                     
1.3695463 1.7717915 0.2355935 
     CATT                     
1.5368085 1.2813927 0.1623363 
     CATT                     
1.5027657 1.6621867 0.2378408 
     CATT                     
1.3396146 0.8778685 0.2438956 
     CATT                     
1.4402749 1.3859372 0.2335174 
     CATT                     
1.5018361 1.3897419 0.2302279 
     CATT                     
1.5685990 1.4046740 0.1931626 
     CATT                     
1.4812627 1.6004077 0.2466018 
     CATT                     
1.5691468 2.1920728 0.2190296 
     CATT                     
1.5386390 1.6851478 0.1992472 
     CATT                     
1.4754107 1.8682155 0.2677059 
     CATT                     
1.3854512 1.6824022 0.2411879 
     CATT                     
1.5572264 1.5537305 0.2111812 
     CATT                     
1.5103620 1.4192650 0.1999664 
     CATT                     
1.4635590 1.3970502 0.2841409 
     CATT                     
1.5049079 1.3512612 0.2462261 
     CATT                     
1.6410705 1.6842822 0.2988764 
     CATT                     
1.5956038 1.8139475 0.2574844 
     CATT                     
1.5672266 1.8068595 0.1943119 
     CATT                     
1.3365554 1.4097873 0.2006312 
     CATT                     
1.4474580 1.0333332 0.2398617 
     CATT                     
1.5708200 1.6753918 0.2435203 
     CATT                     
1.6268796 1.8600004 0.2353708 
     CATT                     
1.5119966 1.8621030 0.2031701 
     CATT                     
1.5222831 1.1962464 0.2219827 
     CATT                     
1.5346513 1.2762696 0.2527887 
     CATT                     
1.6425404 0.8442774 0.2529183 
     CATT                     
1.6122851 1.4534287 0.2124709 
     CATT                     
1.4358610 1.4876748 0.2347607 
