
R version 3.4.4 (2018-03-15) -- "Someone to Lean On"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.3.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> rm(list = ls())
> 
> setwd("~/Projects/FTE/grant001_ghosh_nsf_theorypredanalytics/lib/balanceHD/experiments_for_paper/")
> library(balanceHD)
> library(mvtnorm)
> 
> # Read inputs to simulation
> 
> args = (commandArgs(TRUE))
> beta.setup = as.numeric(args[1])
> prop.setup = as.numeric(args[2])
> n = as.numeric(args[3])
> p = as.numeric(args[4])
> eps = as.numeric(args[5])
> C = as.numeric(args[6])
> extra.param = as.numeric(args[7])
> 
> NREP = as.numeric(args[8])
> 
> experiment = as.numeric(args[9])
> 
> tau = 1
> 
> source("run.comparison.R")
> 
> # Intialize beta
> 
> if(beta.setup == 0) {
+   beta.raw = rep(1, p)
+ } else if(beta.setup == 1){
+   beta.raw = 1/sqrt(1:p)
+ } else if(beta.setup == 2) {
+   beta.raw = 1/(9 + 1:p)
+ } else if(beta.setup == 3) {
+   beta.raw = c(rep(10, 10), rep(1, 90), rep(0, p - 100))
+ } else if(beta.setup == 4) {
+   beta.raw = c(rep(10, 10), rep(0, p - 10))
+ } else if(beta.setup == 5) {
+   beta.raw = 1/(1:p)^2
+ } else if(beta.setup == 6) {
+   beta.raw = 1/(1:p)
+ }
> 
> beta.main =  C  * beta.raw / sqrt(sum(beta.raw^2))
> 
> # Initialize data-generating model
> if(prop.setup == 1) {
+ 	
+ 	# simple setup
+ 	if (extra.param == 1) {
+ 		delta.clust = 4 / sqrt(n) * rep(1, p)
+ 	} else if (extra.param == 2) {
+ 		delta.clust = 40 / sqrt(n) * rep(c(1, rep(0, 9)), p/10)
+ 	}
+ 	gen.data = function() {
+ 		CLUST = rbinom(n, 1, 0.5)
+ 		W = rbinom(n, 1, eps + (1 - 2*eps) * CLUST)
+ 		X = matrix(rnorm(n * p), n, p) + outer(CLUST, delta.clust)
+ 		Y = X %*% beta.main + rnorm(n) + tau * W
+ 		list(X=X, Y=Y, W=W, catt=tau)
+ 	}
+ 
+ } else if(prop.setup == 2) {
+ 
+ 	# AR-1 model
+ 	rho = c(0.5, 0.9)[extra.param]
+ 	beta.main = beta.main[1 + (23 * (0:(length(beta.main) - 1))) %% length(beta.main)]
+ 	beta.prop = c(rep(1/40, 100), rep(0, p - 100))
+ 	gen.data = function() {
+ 		X = 10 * rmvnorm(n, sigma = outer(1:p, 1:p, FUN=function(x, y) rho^(abs(x-y))), method = "chol")
+ 		W = rbinom(n, 1, prob = 1/(1 + exp(-beta.prop * X)))
+ 		Y = X %*% beta.main + rnorm(n, 0, 1) + tau * W
+ 		list(X=X, Y=Y, W=W, catt=tau)
+ 	}
+ 
+ } else if(prop.setup == 3) {
+ 
+ 	# many cluster model
+ 	nclust = c(6, 20)[extra.param]
+ 	beta.main = sqrt(nclust) * beta.main
+ 	clust.ptreat = rep(c(eps, 1 - eps), nclust/2)
+ 	tau.clust = tau * rexp(nclust)
+ 	gen.data = function() {
+ 		cluster.center = matrix(rnorm(nclust * p), nclust, p)
+ 		cluster = sample.int(nclust, n, replace = TRUE)
+ 		X = cluster.center[cluster,] + matrix(rnorm(n * p), n, p)
+ 		W = rbinom(n, 1, clust.ptreat[cluster])
+ 		Y = X %*% beta.main + rnorm(n, 0, 1) + tau.clust[cluster] * W
+ 		list(X=X, Y=Y, W=W, catt=mean(tau.clust[cluster[W==1]]))
+ 	}
+ 
+ } else if(prop.setup == 4) {
+ 
+ 	tau = 1
+ 	
+ 	# misspecified model
+ 	gen.data = function() {
+ 		X = matrix(rnorm(n * p), n, p)
+ 		# Normalized such that E[tauX | W = 1] = 1
+ 		tauX = log(1 + exp(-2 - 2 * X[,1])) / 0.915
+ 		ptreat = 1 - exp(-tauX)
+ 		W = rbinom(n, 1, prob = ptreat)
+ 		mean(tauX[W == 1])
+ 		Y = rnorm(n, 0, 1) + tauX * (2 * W - 1) / 2 + rowSums(X[,1:10])
+ 		list(X=X, Y=Y, W=W, catt=mean(tauX[W==1]))
+ 	}
+         
+ } else if(prop.setup == 6) {
+ 
+ 	tau = 0.5
+ 	rho = 0.5
+ 	
+ 	Sigma = outer(1:p, 1:p, FUN=function(x, y) rho^(abs(x-y)))
+ 	
+ 	beta.raw = 1/(1:p)^2
+ 	beta.main =  C  * beta.raw / sqrt(sum(beta.raw^2))
+ 	
+ 	if (extra.param == 1) {
+ 		beta.prop = 1/(1:p)^2
+ 	} else if (extra.param == 2) {
+ 	    beta.prop = 1/sqrt(1:p)
+ 	}
+ 	
+ 	beta.prop = eps * beta.prop / sqrt(sum(beta.prop^2))
+ 	
+ 	gen.data = function() {
+ 		X = rmvnorm(n, sigma = Sigma, method = "chol")
+ 		theta = X %*% beta.prop + rnorm(n)
+ 		W = rbinom(n, 1, 1/(1 + exp(theta)))
+ 		Y = X %*% beta.main + W * tau + rnorm(n)
+ 		list(X=X, Y=Y, W=W, catt=tau)
+ 	}
+         
+ }
> 
> 
> 
> if (experiment == 1) {
+ 	
+ 	# MSE vs. other methods
+ 	results = replicate(NREP, {
+ 		XYW = gen.data()
+ 		res = run.comparison(XYW)
+ 		print(c(CATT=XYW$catt, res))
+ 		return(c(CATT=XYW$catt, res))
+ 	})
+ 	
+ 	print(colMeans((t(results) - results["CATT",])/results["CATT",]))
+ 	print(colMeans(((t(results) - results["CATT",])/results["CATT",])^2))
+ 	
+ } else if (experiment == 2) {
+ 	
+ 	# coverage
+ 	results = replicate(NREP, {
+ 		XYW = gen.data()
+ 		res = coverage.test(XYW)
+ 		print(c(CATT=XYW$catt, res))
+ 		return(c(CATT=XYW$catt, res))
+ 	})
+ 	rownames(results) = c("CATT", "tau.hat", "se.hat")
+ 	se.err = (results[2,] - results[1,]) / results[3,]
+ 	coverage = mean(abs(se.err) <= qnorm(0.975))
+ }
     CATT                     
0.9202962 0.8264941 0.1704668 
     CATT                     
0.9880046 1.1676899 0.1731531 
     CATT                     
0.9842110 0.9634944 0.1724569 
     CATT                     
0.9656074 0.9719173 0.1863086 
     CATT                     
0.9355299 0.9126820 0.1986594 
     CATT                     
1.0265708 1.0862405 0.1643488 
     CATT                     
0.9115344 0.9937233 0.2095548 
     CATT                     
0.9163081 0.9358484 0.1727158 
     CATT                     
0.8610821 0.7752546 0.1754731 
     CATT                     
0.9289838 0.8588153 0.1757716 
     CATT                     
0.9402215 0.5283216 0.1850419 
     CATT                     
0.9294053 1.1529343 0.1925151 
     CATT                     
1.0018134 1.0410159 0.1710937 
     CATT                     
0.8939136 0.8241586 0.1805575 
     CATT                     
0.9858176 0.6457327 0.1573970 
     CATT                     
0.8917175 1.0147227 0.1764861 
     CATT                     
0.9574986 0.9095867 0.1551808 
     CATT                     
0.7905575 0.9365764 0.1659911 
     CATT                     
0.9327428 0.8459205 0.1724989 
     CATT                     
0.9276436 0.8505655 0.1699437 
     CATT                     
0.8777170 0.5367257 0.1986298 
     CATT                     
1.0083124 0.8817544 0.2096692 
     CATT                     
0.9280865 0.8519337 0.1834076 
     CATT                     
0.9048435 0.7283806 0.1778888 
     CATT                     
0.8937944 0.9097503 0.1954285 
     CATT                     
0.9766547 0.7781577 0.1863304 
     CATT                     
0.9145537 0.7835111 0.1621833 
     CATT                     
0.8699829 0.8678885 0.1754579 
     CATT                     
0.9677232 1.2498279 0.1999422 
     CATT                     
0.8691424 0.8969860 0.1785684 
     CATT                     
0.8797626 0.6438315 0.1516562 
     CATT                     
1.0033664 1.0946704 0.1589757 
    CATT                   
0.942695 1.025847 0.167019 
     CATT                     
0.9486236 0.9642001 0.1823467 
     CATT                     
0.8902394 1.2019395 0.1750367 
     CATT                     
0.9770122 0.8793682 0.1727227 
     CATT                     
0.8706652 1.0546130 0.1772606 
     CATT                     
0.9182597 0.9220489 0.1621275 
     CATT                     
0.9104662 0.9524205 0.1783427 
     CATT                     
0.8857775 1.0746573 0.1741331 
     CATT                     
0.9462499 1.4851182 0.1906958 
     CATT                     
0.8653781 0.8837716 0.1698947 
     CATT                     
0.9410852 1.1683662 0.1701049 
     CATT                     
0.8614838 0.7719555 0.2410319 
     CATT                     
0.8200890 0.7868730 0.1718014 
     CATT                     
0.8623994 0.8949042 0.1571190 
