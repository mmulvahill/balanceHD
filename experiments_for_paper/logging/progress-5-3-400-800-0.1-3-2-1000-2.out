
R version 3.4.4 (2018-03-15) -- "Someone to Lean On"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.3.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> rm(list = ls())
> 
> setwd("~/Projects/FTE/grant001_ghosh_nsf_theorypredanalytics/lib/balanceHD/experiments_for_paper/")
> library(balanceHD)
> library(mvtnorm)
> 
> # Read inputs to simulation
> 
> args = (commandArgs(TRUE))
> beta.setup = as.numeric(args[1])
> prop.setup = as.numeric(args[2])
> n = as.numeric(args[3])
> p = as.numeric(args[4])
> eps = as.numeric(args[5])
> C = as.numeric(args[6])
> extra.param = as.numeric(args[7])
> 
> NREP = as.numeric(args[8])
> 
> experiment = as.numeric(args[9])
> 
> tau = 1
> 
> source("run.comparison.R")
> 
> # Intialize beta
> 
> if(beta.setup == 0) {
+   beta.raw = rep(1, p)
+ } else if(beta.setup == 1){
+   beta.raw = 1/sqrt(1:p)
+ } else if(beta.setup == 2) {
+   beta.raw = 1/(9 + 1:p)
+ } else if(beta.setup == 3) {
+   beta.raw = c(rep(10, 10), rep(1, 90), rep(0, p - 100))
+ } else if(beta.setup == 4) {
+   beta.raw = c(rep(10, 10), rep(0, p - 10))
+ } else if(beta.setup == 5) {
+   beta.raw = 1/(1:p)^2
+ } else if(beta.setup == 6) {
+   beta.raw = 1/(1:p)
+ }
> 
> beta.main =  C  * beta.raw / sqrt(sum(beta.raw^2))
> 
> # Initialize data-generating model
> if(prop.setup == 1) {
+ 	
+ 	# simple setup
+ 	if (extra.param == 1) {
+ 		delta.clust = 4 / sqrt(n) * rep(1, p)
+ 	} else if (extra.param == 2) {
+ 		delta.clust = 40 / sqrt(n) * rep(c(1, rep(0, 9)), p/10)
+ 	}
+ 	gen.data = function() {
+ 		CLUST = rbinom(n, 1, 0.5)
+ 		W = rbinom(n, 1, eps + (1 - 2*eps) * CLUST)
+ 		X = matrix(rnorm(n * p), n, p) + outer(CLUST, delta.clust)
+ 		Y = X %*% beta.main + rnorm(n) + tau * W
+ 		list(X=X, Y=Y, W=W, catt=tau)
+ 	}
+ 
+ } else if(prop.setup == 2) {
+ 
+ 	# AR-1 model
+ 	rho = c(0.5, 0.9)[extra.param]
+ 	beta.main = beta.main[1 + (23 * (0:(length(beta.main) - 1))) %% length(beta.main)]
+ 	beta.prop = c(rep(1/40, 100), rep(0, p - 100))
+ 	gen.data = function() {
+ 		X = 10 * rmvnorm(n, sigma = outer(1:p, 1:p, FUN=function(x, y) rho^(abs(x-y))), method = "chol")
+ 		W = rbinom(n, 1, prob = 1/(1 + exp(-beta.prop * X)))
+ 		Y = X %*% beta.main + rnorm(n, 0, 1) + tau * W
+ 		list(X=X, Y=Y, W=W, catt=tau)
+ 	}
+ 
+ } else if(prop.setup == 3) {
+ 
+ 	# many cluster model
+ 	nclust = c(6, 20)[extra.param]
+ 	beta.main = sqrt(nclust) * beta.main
+ 	clust.ptreat = rep(c(eps, 1 - eps), nclust/2)
+ 	tau.clust = tau * rexp(nclust)
+ 	gen.data = function() {
+ 		cluster.center = matrix(rnorm(nclust * p), nclust, p)
+ 		cluster = sample.int(nclust, n, replace = TRUE)
+ 		X = cluster.center[cluster,] + matrix(rnorm(n * p), n, p)
+ 		W = rbinom(n, 1, clust.ptreat[cluster])
+ 		Y = X %*% beta.main + rnorm(n, 0, 1) + tau.clust[cluster] * W
+ 		list(X=X, Y=Y, W=W, catt=mean(tau.clust[cluster[W==1]]))
+ 	}
+ 
+ } else if(prop.setup == 4) {
+ 
+ 	tau = 1
+ 	
+ 	# misspecified model
+ 	gen.data = function() {
+ 		X = matrix(rnorm(n * p), n, p)
+ 		# Normalized such that E[tauX | W = 1] = 1
+ 		tauX = log(1 + exp(-2 - 2 * X[,1])) / 0.915
+ 		ptreat = 1 - exp(-tauX)
+ 		W = rbinom(n, 1, prob = ptreat)
+ 		mean(tauX[W == 1])
+ 		Y = rnorm(n, 0, 1) + tauX * (2 * W - 1) / 2 + rowSums(X[,1:10])
+ 		list(X=X, Y=Y, W=W, catt=mean(tauX[W==1]))
+ 	}
+         
+ } else if(prop.setup == 6) {
+ 
+ 	tau = 0.5
+ 	rho = 0.5
+ 	
+ 	Sigma = outer(1:p, 1:p, FUN=function(x, y) rho^(abs(x-y)))
+ 	
+ 	beta.raw = 1/(1:p)^2
+ 	beta.main =  C  * beta.raw / sqrt(sum(beta.raw^2))
+ 	
+ 	if (extra.param == 1) {
+ 		beta.prop = 1/(1:p)^2
+ 	} else if (extra.param == 2) {
+ 	    beta.prop = 1/sqrt(1:p)
+ 	}
+ 	
+ 	beta.prop = eps * beta.prop / sqrt(sum(beta.prop^2))
+ 	
+ 	gen.data = function() {
+ 		X = rmvnorm(n, sigma = Sigma, method = "chol")
+ 		theta = X %*% beta.prop + rnorm(n)
+ 		W = rbinom(n, 1, 1/(1 + exp(theta)))
+ 		Y = X %*% beta.main + W * tau + rnorm(n)
+ 		list(X=X, Y=Y, W=W, catt=tau)
+ 	}
+         
+ }
> 
> 
> 
> if (experiment == 1) {
+ 	
+ 	# MSE vs. other methods
+ 	results = replicate(NREP, {
+ 		XYW = gen.data()
+ 		res = run.comparison(XYW)
+ 		print(c(CATT=XYW$catt, res))
+ 		return(c(CATT=XYW$catt, res))
+ 	})
+ 	
+ 	print(colMeans((t(results) - results["CATT",])/results["CATT",]))
+ 	print(colMeans(((t(results) - results["CATT",])/results["CATT",])^2))
+ 	
+ } else if (experiment == 2) {
+ 	
+ 	# coverage
+ 	results = replicate(NREP, {
+ 		XYW = gen.data()
+ 		res = coverage.test(XYW)
+ 		print(c(CATT=XYW$catt, res))
+ 		return(c(CATT=XYW$catt, res))
+ 	})
+ 	rownames(results) = c("CATT", "tau.hat", "se.hat")
+ 	se.err = (results[2,] - results[1,]) / results[3,]
+ 	coverage = mean(abs(se.err) <= qnorm(0.975))
+ }
     CATT                     
1.1949955 1.4644607 0.2241583 
     CATT                     
1.2985721 1.5383221 0.2108088 
     CATT                     
1.2241428 0.8439782 0.2557719 
     CATT                     
1.1057760 1.4745345 0.2186111 
     CATT                     
1.2165149 1.0315794 0.2902493 
     CATT                     
1.3731672 1.6521079 0.1742124 
     CATT                     
1.2456321 1.1863776 0.2920883 
     CATT                     
1.2957120 0.7425747 0.2743511 
     CATT                     
1.1517870 1.2208846 0.1829053 
     CATT                     
1.2109516 0.9536419 0.1642713 
     CATT                     
1.1896662 1.2701233 0.2263167 
     CATT                     
1.2684487 1.4188920 0.2237601 
     CATT                     
1.1183754 1.1783603 0.1913068 
     CATT                     
1.2289311 1.1068030 0.1740517 
     CATT                     
1.2361205 1.6635817 0.2657905 
     CATT                     
1.3796067 1.6677644 0.2264895 
     CATT                     
1.3338049 1.4119259 0.2626888 
     CATT                     
1.2811337 1.3730285 0.2318663 
     CATT                     
1.1786549 1.2392708 0.2460919 
     CATT                     
1.1671665 0.9290657 0.2720538 
     CATT                     
1.3551148 1.0522118 0.2400621 
     CATT                     
1.2747033 1.8742597 0.2175526 
     CATT                     
1.1911296 0.8765661 0.2687982 
     CATT                     
1.3297355 1.1710704 0.2460065 
     CATT                     
1.1081105 0.5786786 0.1997987 
     CATT                     
1.2903592 1.0268250 0.2291149 
     CATT                     
1.0814635 1.4848662 0.2191108 
     CATT                     
1.2347057 1.4806896 0.2472261 
     CATT                     
1.1179076 0.9243901 0.2561458 
     CATT                     
1.2938955 0.8930250 0.2024382 
     CATT                     
1.3351151 1.6324248 0.1874989 
     CATT                     
1.0917753 0.6578313 0.2554929 
     CATT                     
1.3040843 1.2692412 0.1831249 
     CATT                     
1.1686557 1.1737871 0.2221131 
     CATT                     
1.1359400 1.0110607 0.2361632 
     CATT                     
1.2683200 1.2465003 0.2396746 
     CATT                     
1.2933626 0.9229919 0.2473177 
     CATT                     
1.2761296 1.2901842 0.2181223 
     CATT                     
1.2176839 1.0788121 0.2184796 
    CATT                   
1.250156 1.428158 0.221533 
     CATT                     
1.2917137 0.8637375 0.2043531 
     CATT                     
1.1932643 1.0668160 0.2022856 
     CATT                     
1.3253334 1.3982105 0.2366357 
    CATT                   
1.147521 1.324077 0.214368 
    CATT                   
1.320567 1.663895 0.287676 
     CATT                     
1.2133823 1.2250073 0.2156187 
     CATT                     
1.4103186 1.3932159 0.2009113 
    CATT                   
1.145627 0.845711 0.195611 
     CATT                     
1.1991511 1.3282125 0.2089608 
     CATT                     
1.2842269 1.0677187 0.2254559 
     CATT                     
1.2575176 1.3374004 0.2118442 
     CATT                     
1.2903230 0.9957775 0.2336573 
     CATT                     
1.2831128 1.1608275 0.1613587 
     CATT                     
1.3500150 1.3352297 0.2055902 
     CATT                     
1.1088509 1.1390912 0.2070301 
     CATT                     
1.2637747 1.6707272 0.2280412 
     CATT                     
1.2889843 1.2499955 0.2075456 
     CATT                     
1.3262916 1.0423992 0.2782813 
     CATT                     
1.2110958 1.8475794 0.2162859 
     CATT                     
1.1984916 1.1761452 0.2043642 
     CATT                     
1.2280684 1.3604121 0.3012179 
     CATT                     
1.2504610 1.2668784 0.2854022 
     CATT                     
1.2028589 1.1277202 0.2017242 
     CATT                     
1.3512225 1.0114550 0.2555771 
     CATT                     
1.1614809 1.1049252 0.1868024 
     CATT                     
1.2387605 1.7567961 0.2129332 
    CATT                   
1.183519 1.175171 0.215553 
     CATT                     
1.3757377 1.3526897 0.1873802 
     CATT                     
1.1548562 1.1718407 0.2488473 
    CATT                   
1.157635 1.659339 0.193592 
     CATT                     
1.1470240 1.2908211 0.2500839 
     CATT                     
1.2930217 1.2863726 0.1921335 
     CATT                     
1.2089492 1.1730704 0.2212701 
     CATT                     
1.3367466 1.2262350 0.2150299 
    CATT                   
1.234548 1.839365 0.194973 
     CATT                     
1.2302311 0.8731785 0.2045573 
    CATT                   
1.188403 1.014012 0.225267 
     CATT                     
1.2901847 1.0064079 0.3201001 
     CATT                     
1.0923558 1.2795544 0.2708255 
     CATT                     
1.1840047 1.2637586 0.2119834 
     CATT                     
1.2270570 1.3231606 0.1479298 
    CATT                   
1.273792 1.246989 0.190317 
     CATT                     
1.0805452 0.9918670 0.2357547 
     CATT                     
1.0798015 1.3761657 0.2551077 
    CATT                   
1.327444 1.902309 0.287195 
     CATT                     
1.2333772 1.2473575 0.2499881 
