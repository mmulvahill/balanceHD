
R version 3.4.4 (2018-03-15) -- "Someone to Lean On"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.3.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> rm(list = ls())
> 
> setwd("~/Projects/FTE/grant001_ghosh_nsf_theorypredanalytics/lib/balanceHD/experiments_for_paper/")
> library(balanceHD)
> library(mvtnorm)
> 
> # Read inputs to simulation
> 
> args = (commandArgs(TRUE))
> beta.setup = as.numeric(args[1])
> prop.setup = as.numeric(args[2])
> n = as.numeric(args[3])
> p = as.numeric(args[4])
> eps = as.numeric(args[5])
> C = as.numeric(args[6])
> extra.param = as.numeric(args[7])
> 
> NREP = as.numeric(args[8])
> 
> experiment = as.numeric(args[9])
> 
> tau = 1
> 
> source("run.comparison.R")
> 
> # Intialize beta
> 
> if(beta.setup == 0) {
+   beta.raw = rep(1, p)
+ } else if(beta.setup == 1){
+   beta.raw = 1/sqrt(1:p)
+ } else if(beta.setup == 2) {
+   beta.raw = 1/(9 + 1:p)
+ } else if(beta.setup == 3) {
+   beta.raw = c(rep(10, 10), rep(1, 90), rep(0, p - 100))
+ } else if(beta.setup == 4) {
+   beta.raw = c(rep(10, 10), rep(0, p - 10))
+ } else if(beta.setup == 5) {
+   beta.raw = 1/(1:p)^2
+ } else if(beta.setup == 6) {
+   beta.raw = 1/(1:p)
+ }
> 
> beta.main =  C  * beta.raw / sqrt(sum(beta.raw^2))
> 
> # Initialize data-generating model
> if(prop.setup == 1) {
+ 	
+ 	# simple setup
+ 	if (extra.param == 1) {
+ 		delta.clust = 4 / sqrt(n) * rep(1, p)
+ 	} else if (extra.param == 2) {
+ 		delta.clust = 40 / sqrt(n) * rep(c(1, rep(0, 9)), p/10)
+ 	}
+ 	gen.data = function() {
+ 		CLUST = rbinom(n, 1, 0.5)
+ 		W = rbinom(n, 1, eps + (1 - 2*eps) * CLUST)
+ 		X = matrix(rnorm(n * p), n, p) + outer(CLUST, delta.clust)
+ 		Y = X %*% beta.main + rnorm(n) + tau * W
+ 		list(X=X, Y=Y, W=W, catt=tau)
+ 	}
+ 
+ } else if(prop.setup == 2) {
+ 
+ 	# AR-1 model
+ 	rho = c(0.5, 0.9)[extra.param]
+ 	beta.main = beta.main[1 + (23 * (0:(length(beta.main) - 1))) %% length(beta.main)]
+ 	beta.prop = c(rep(1/40, 100), rep(0, p - 100))
+ 	gen.data = function() {
+ 		X = 10 * rmvnorm(n, sigma = outer(1:p, 1:p, FUN=function(x, y) rho^(abs(x-y))), method = "chol")
+ 		W = rbinom(n, 1, prob = 1/(1 + exp(-beta.prop * X)))
+ 		Y = X %*% beta.main + rnorm(n, 0, 1) + tau * W
+ 		list(X=X, Y=Y, W=W, catt=tau)
+ 	}
+ 
+ } else if(prop.setup == 3) {
+ 
+ 	# many cluster model
+ 	nclust = c(6, 20)[extra.param]
+ 	beta.main = sqrt(nclust) * beta.main
+ 	clust.ptreat = rep(c(eps, 1 - eps), nclust/2)
+ 	tau.clust = tau * rexp(nclust)
+ 	gen.data = function() {
+ 		cluster.center = matrix(rnorm(nclust * p), nclust, p)
+ 		cluster = sample.int(nclust, n, replace = TRUE)
+ 		X = cluster.center[cluster,] + matrix(rnorm(n * p), n, p)
+ 		W = rbinom(n, 1, clust.ptreat[cluster])
+ 		Y = X %*% beta.main + rnorm(n, 0, 1) + tau.clust[cluster] * W
+ 		list(X=X, Y=Y, W=W, catt=mean(tau.clust[cluster[W==1]]))
+ 	}
+ 
+ } else if(prop.setup == 4) {
+ 
+ 	tau = 1
+ 	
+ 	# misspecified model
+ 	gen.data = function() {
+ 		X = matrix(rnorm(n * p), n, p)
+ 		# Normalized such that E[tauX | W = 1] = 1
+ 		tauX = log(1 + exp(-2 - 2 * X[,1])) / 0.915
+ 		ptreat = 1 - exp(-tauX)
+ 		W = rbinom(n, 1, prob = ptreat)
+ 		mean(tauX[W == 1])
+ 		Y = rnorm(n, 0, 1) + tauX * (2 * W - 1) / 2 + rowSums(X[,1:10])
+ 		list(X=X, Y=Y, W=W, catt=mean(tauX[W==1]))
+ 	}
+         
+ } else if(prop.setup == 6) {
+ 
+ 	tau = 0.5
+ 	rho = 0.5
+ 	
+ 	Sigma = outer(1:p, 1:p, FUN=function(x, y) rho^(abs(x-y)))
+ 	
+ 	beta.raw = 1/(1:p)^2
+ 	beta.main =  C  * beta.raw / sqrt(sum(beta.raw^2))
+ 	
+ 	if (extra.param == 1) {
+ 		beta.prop = 1/(1:p)^2
+ 	} else if (extra.param == 2) {
+ 	    beta.prop = 1/sqrt(1:p)
+ 	}
+ 	
+ 	beta.prop = eps * beta.prop / sqrt(sum(beta.prop^2))
+ 	
+ 	gen.data = function() {
+ 		X = rmvnorm(n, sigma = Sigma, method = "chol")
+ 		theta = X %*% beta.prop + rnorm(n)
+ 		W = rbinom(n, 1, 1/(1 + exp(theta)))
+ 		Y = X %*% beta.main + W * tau + rnorm(n)
+ 		list(X=X, Y=Y, W=W, catt=tau)
+ 	}
+         
+ }
> 
> 
> 
> if (experiment == 1) {
+ 	
+ 	# MSE vs. other methods
+ 	results = replicate(NREP, {
+ 		XYW = gen.data()
+ 		res = run.comparison(XYW)
+ 		print(c(CATT=XYW$catt, res))
+ 		return(c(CATT=XYW$catt, res))
+ 	})
+ 	
+ 	print(colMeans((t(results) - results["CATT",])/results["CATT",]))
+ 	print(colMeans(((t(results) - results["CATT",])/results["CATT",])^2))
+ 	
+ } else if (experiment == 2) {
+ 	
+ 	# coverage
+ 	results = replicate(NREP, {
+ 		XYW = gen.data()
+ 		res = coverage.test(XYW)
+ 		print(c(CATT=XYW$catt, res))
+ 		return(c(CATT=XYW$catt, res))
+ 	})
+ 	rownames(results) = c("CATT", "tau.hat", "se.hat")
+ 	se.err = (results[2,] - results[1,]) / results[3,]
+ 	coverage = mean(abs(se.err) <= qnorm(0.975))
+ }
     CATT                     
0.8671212 0.7365552 0.7217620 
    CATT                   
0.924222 2.769125 0.466284 
     CATT                     
0.8446760 0.3807523 0.4410689 
     CATT                     
0.7707346 0.9080994 0.5966292 
     CATT                     
0.9313393 0.9415401 0.4257635 
     CATT                     
0.8922396 1.1695406 0.3466337 
     CATT                     
1.0262308 1.8902743 0.5040488 
      CATT                       
 0.9489368 -0.4080685  0.3996550 
     CATT                     
0.8903136 2.2602844 0.5074644 
     CATT                     
0.8265523 0.5773941 0.4659736 
     CATT                     
0.8777136 1.2115031 0.3540909 
     CATT                     
0.8944279 1.3208552 0.4617258 
     CATT                     
0.8413325 0.8948991 0.8898556 
     CATT                     
0.9889540 2.6138298 0.5321089 
     CATT                     
0.8809274 0.9759059 0.4612292 
     CATT                     
0.9278226 0.8872655 0.4966222 
     CATT                     
0.9104063 0.3768218 0.5299997 
     CATT                     
1.0137053 0.6050713 0.3757851 
     CATT                     
0.9510851 1.8465351 0.5041694 
     CATT                     
0.8775096 1.2493243 0.4695390 
     CATT                     
0.8761004 1.6488094 0.4629630 
     CATT                     
0.8713667 0.1932885 0.3631797 
     CATT                     
0.8831098 1.7478353 0.5249710 
     CATT                     
0.9255022 0.3377892 0.4625605 
     CATT                     
0.9553290 2.0180758 0.4917232 
     CATT                     
0.8543101 1.0585880 0.5817814 
      CATT                       
 0.8743740 -0.4218647  0.4268057 
     CATT                     
0.8463276 0.4594792 0.4942127 
     CATT                     
0.8757718 1.4941612 0.6507093 
     CATT                     
0.8926451 1.5697869 0.4182728 
     CATT                     
0.7494401 2.2246150 0.5584659 
     CATT                     
0.9740507 0.9957048 0.4643430 
     CATT                     
0.9084852 0.2429018 0.6060277 
     CATT                     
0.8151724 1.0147851 0.6021494 
      CATT                       
 0.8845986 -0.1234595  0.5394809 
     CATT                     
0.8899621 0.2811887 0.4087499 
     CATT                     
0.8567436 1.4109503 0.4158581 
      CATT                       
 0.8124812 -0.2155476  0.4555528 
     CATT                     
0.8546579 1.2314752 0.5269195 
      CATT                       
 0.8601725 -0.4881548  0.3814447 
     CATT                     
0.8879283 1.5341663 0.5790334 
     CATT                     
0.8185251 1.1681690 0.4533296 
     CATT                     
0.9231140 0.7335414 0.4570961 
     CATT                     
0.8377884 0.8289632 0.5219160 
     CATT                     
0.9923896 0.8344989 0.5375253 
     CATT                     
0.8443580 1.5276806 0.5416314 
     CATT                     
0.6513109 1.9571378 0.4786127 
       CATT                         
 0.82969146 -0.01499555  0.44771236 
     CATT                     
0.8411966 1.3249272 0.4634963 
     CATT                     
0.7154901 0.7282080 0.5355297 
     CATT                     
0.8306768 2.4601134 0.5712264 
     CATT                     
0.7927942 0.3829105 0.3649295 
     CATT                     
0.8592412 1.0124193 0.6897721 
     CATT                     
0.9337314 0.9729524 0.4200573 
     CATT                     
0.9434332 1.2055632 0.4612418 
     CATT                     
0.9468141 1.2041952 0.5630758 
     CATT                     
0.9418293 0.2990985 0.6220948 
     CATT                     
0.7356740 0.7937876 0.5186182 
     CATT                     
0.8154605 2.5609556 0.4681888 
     CATT                     
0.7768294 0.1420171 0.3974826 
     CATT                     
0.9216694 0.9795877 0.6370166 
     CATT                     
0.9472927 1.8900463 0.3624724 
      CATT                       
 0.7188213 -0.5195372  0.5619130 
     CATT                     
0.8063693 0.4628384 0.4350212 
     CATT                     
0.9233219 0.2214205 0.5694819 
     CATT                     
0.8735554 1.3283759 0.4014865 
     CATT                     
0.8239389 0.4371645 0.3784468 
     CATT                     
0.8872874 0.1594573 0.3838556 
     CATT                     
1.0031733 0.7066486 0.3920096 
     CATT                     
0.8905098 0.3752383 0.5301291 
     CATT                     
0.9069067 0.5093373 0.5580829 
     CATT                     
0.8077089 2.5518240 0.6363355 
     CATT                     
1.0125248 0.3801843 0.3876348 
      CATT                       
 0.8847971 -0.2347552  0.3794325 
     CATT                     
0.9526640 2.0482595 0.3793557 
     CATT                     
1.0234589 1.1687965 0.3947204 
